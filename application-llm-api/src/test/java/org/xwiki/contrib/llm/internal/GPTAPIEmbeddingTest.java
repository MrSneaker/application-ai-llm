/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.contrib.llm.internal;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.jmock.Expectations;
import org.junit.Test;
import org.slf4j.Logger;
import org.xwiki.contrib.llm.GPTAPI;
import org.xwiki.contrib.llm.GPTAPIEmbedding;
import org.xwiki.test.jmock.AbstractMockingComponentTestCase;
import org.xwiki.test.jmock.annotation.MockingRequirement;

import com.github.openjson.JSONArray;
import com.github.openjson.JSONObject;

@MockingRequirement(value = DefaultGPTAPIEmbeddingBERT.class, exceptions = { Logger.class })
public class GPTAPIEmbeddingTest extends AbstractMockingComponentTestCase<GPTAPIEmbedding> {

    @Test
    public void testEmbedding() throws Exception {
        DefaultGPTAPIEmbeddingBERT gptApi = (DefaultGPTAPIEmbeddingBERT) getMockedComponent();

        System.out.println(gptApi);

        this.getMockery().checking(new Expectations() {
            {
            }
        });

        // Very long and ugly string for the test.
        String dataTest = "public final class String extends Object implements Serializable, Comparable<String>, CharSequence The String class represents character strings. All string literals in Java programs, such as \"abc\", are implemented as instances of this class. Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example: String str = \"abc\"; is equivalent to: char data[] = {\'a\', \'b\', \'c\'}; String str = new String(data); Here are some more examples of how strings can be used: System.out.println(\"abc\"); String cde = \"cde\"; System.out.println(\"abc\" + cde); String c = \"abc\".substring(2,3); String d = cde.substring(1, 2); The class String includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the Character class. The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. For additional information on string concatenation and conversion, see The Java™ Language Specification. Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a NullPointerException to be thrown. A String represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs (see the section Unicode Character Representations in the Character class for more information). Index values refer to char code units, so a supplementary character uses two positions in a String. The String class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., char values). Unless otherwise noted, methods for comparing Strings do not take locale into account. The Collator class provides methods for finer-grain, locale-sensitive String comparison. Implementation Note: The implementation of the string concatenation operator is left to the discretion of a Java compiler, as long as the compiler ultimately conforms to The Java™ Language Specification. For example, the javac compiler may implement the operator with StringBuffer, StringBuilder, or java.lang.invoke.StringConcatFactory depending on the JDK version. The implementation of string conversion is typically through the method toString, defined by Object and inherited by all classes in Java. Since: 1.0 See Also: Object.toString(), StringBuffer, StringBuilder, Charset, Serialized Form See The Java™ Language Specification: 15.18.1 String Concatenation Operator + Field Summary Fields Modifier and Type	Field	Description static Comparator<String>	CASE_INSENSITIVE_ORDER A Comparator that orders String objects as by compareToIgnoreCase. Constructor Summary Constructors Constructor	Description String() Initializes a newly created String object so that it represents an empty character sequence. String (byte[] bytes) Constructs a new String by decoding the specified array of bytes using the platform's default charset. String (byte[] ascii, int hibyte) Deprecated. This method does not properly convert bytes into characters. String (byte[] bytes, int offset, int length) Constructs a new String by decoding the specified subarray of bytes using the platform's default charset. Stri(byte[] ascii, int hibyte, int offset, int count) Deprecated. This method does not properly convert bytes into characters. Stri(byte[] bytes, int offset, int length, String charsetName) Constructs a new String by decoding the specified subarray of bytes using the specified charset. Stri(byte[] bytes, int offset, int length, Charset charset) Constructs a new String by decoding the specified subarray of bytes using the specified charset. Strin(byte[] bytes, String charsetName) Constructs a new String by decoding the specified array of bytes using the specified charset. String(byte[] bytes, Charset charset) Constructs a new String by decoding the specified array of bytes using the specified charset. Strin(char[] value) Allocates a new String so that it represents the sequence of characters currently contained in the character array argument. String(char[] value, int offset, int count) Allocates a new String that contains characters from a subarray of the character array argument. String​(int[] codePoints, int offset, int count) Allocates a new String that contains characters from a subarray of the Unicode code point array argument. String​(String original) Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string. String​(StringBuffer buffer) Allocates a new string that contains the sequence of characters currently contained in the string buffer argument. String​(StringBuilder builder) Allocates a new string that contains the sequence of characters currently contained in the string builder argument. Method Summary All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods Modifier and Type	Method	Description char	charAt​(int index) Returns the char value at the specified index. IntStream	chars() Returns a stream of int zero-extending the char values from this sequence. int	codePointAt​(int index) Returns the character (Unicode code point) at the specified index. int	codePointBefore​(int index) Returns the character (Unicode code point) before the specified index. int	codePointCount​(int beginIndex, int endIndex) Returns the number of Unicode code points in the specified text range of this String. IntStream	codePoints() Returns a stream of code point values from this sequence. int	compareTo​(String anotherString) Compares two strings lexicographically. int	compareToIgnoreCase​(String str) Compares two strings lexicographically, ignoring case differences. String	concat​(String str) Concatenates the specified string to the end of this string. boolean	contains​(CharSequence s) Returns true if and only if this string contains the specified sequence of char values. boolean	contentEquals​(CharSequence cs) Compares this string to the specified CharSequence. boolean	contentEquals​(StringBuffer sb) Compares this string to the specified StringBuffer. static String	copyValueOf​(char[] data) Equivalent to valueOf(char[]). static String	copyValueOf​(char[] data, int offset, int count) Equivalent to valueOf(char[], int, int). boolean	endsWith​(String suffix) Tests if this string ends with the specified suffix. boolean	equals​(Object anObject) Compares this string to the specified object. boolean	equalsIgnoreCase​(String anotherString) Compares this String to another String, ignoring case considerations. static String	format​(String format, Object... args) Returns a formatted string using the specified format string and arguments. static String	format​(Locale l, String format, Object... args) Returns a formatted string using the specified locale, format string, and arguments. byte[]	getBytes() Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array. void	getBytes​(int srcBegin, int srcEnd, byte[] dst, int dstBegin) Deprecated. This method does not properly convert characters into bytes. byte[]	getBytes​(String charsetName) Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array. byte[]	getBytes​(Charset charset) Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array. void	getChars​(int srcBegin, int srcEnd, char[] dst, int dstBegin) Copies characters from this string into the destination character array. int	hashCode() Returns a hash code for this string. int	indexOf​(int ch) Returns the index within this string of the first occurrence of the specified character. int	indexOf​(int ch, int fromIndex) Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. int	indexOf​(String str) Returns the index within this string of the first occurrence of the specified substring. int	indexOf​(String str, int fromIndex) Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. String	intern() Returns a canonical representation for the string object. boolean	isBlank() Returns true if the string is empty or contains only white space codepoints, otherwise false. boolean	isEmpty() Returns true if, and only if, length() is 0. static String	join​(CharSequence delimiter, CharSequence... elements) Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter. static String	join​(CharSequence delimiter, Iterable<? extends CharSequence> elements) Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter. int	lastIndexOf​(int ch) Returns the index within this string of the last occurrence of the specified character. int	lastIndexOf​(int ch, int fromIndex) Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. int	lastIndexOf​(String str) Returns the index within this string of the last occurrence of the specified substring. int	lastIndexOf​(String str, int fromIndex) Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. int	length() Returns the length of this string. Stream<String>	lines() Returns a stream of lines extracted from this string, separated by line terminators. boolean	matches​(String regex) Tells whether or not this string matches the given regular expression. int	offsetByCodePoints​(int index, int codePointOffset) Returns the index within this String that is offset from the given index by codePointOffset code points. boolean	regionMatches​(boolean ignoreCase, int toffset, String other, int ooffset, int len) Tests if two string regions are equal. boolean	regionMatches​(int toffset, String other, int ooffset, int len) Tests if two string regions are equal. String	repeat​(int count) Returns a string whose value is the concatenation of this string repeated count times. String	replace​(char oldChar, char newChar) Returns a string resulting from replacing all occurrences of oldChar in this string with newChar. String	replace​(CharSequence target, CharSequence replacement) Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. String	replaceAll​(String regex, String replacement) Replaces each substring of this string that matches the given regular expression with the given replacement. String	replaceFirst​(String regex, String replacement) Replaces the first substring of this string that matches the given regular expression with the given replacement. String[]	split​(String regex) Splits this string around matches of the given regular expression. String[]	split​(String regex, int limit) Splits this string around matches of the given regular expression. boolean	startsWith​(String prefix) Tests if this string starts with the specified prefix. boolean	startsWith​(String prefix, int toffset) Tests if the substring of this string beginning at the specified index starts with the specified prefix. String	strip() Returns a string whose value is this string, with all leading and trailing white space removed. String	stripLeading() Returns a string whose value is this string, with all leading white space removed. String	stripTrailing() Returns a string whose value is this string, with all trailing white space removed. CharSequence	subSequence​(int beginIndex, int endIndex) Returns a character sequence that is a subsequence of this sequence. String	substring​(int beginIndex) Returns a string that is a substring of this string. String	substring​(int beginIndex, int endIndex) Returns a string that is a substring of this string. char[]	toCharArray() Converts this string to a new character array. String	toLowerCase() Converts all of the characters in this String to lower case using the rules of the default locale. String	toLowerCase​(Locale locale) Converts all of the characters in this String to lower case using the rules of the given Locale. String	toString() This object (which is already a string!) String	toUpperCase() Converts all of the characters in this String to upper case using the rules of the default locale. String	toUpperCase​(Locale locale) Converts all of the characters in this String to upper case using the rules of the given Locale. String	trim() Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to 'U+0020' (the space character). static String	valueOf​(boolean b) Returns the string representation of the boolean argument. static String	valueOf​(char c) Returns the string representation of the char argument. static String	valueOf​(char[] data) Returns the string representation of the char array argument. static String	valueOf​(char[] data, int offset, int count) Returns the string representation of a specific subarray of the char array argument. static String	valueOf​(double d) Returns the string representation of the double argument. static String	valueOf​(float f) Returns the string representation of the float argument. static String	valueOf​(int i) Returns the string representation of the int argument. static String	valueOf​(long l) Returns the string representation of the long argument. static String	valueOf​(Object obj) Returns the string representation of the Object argument. Methods declared in class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail CASE_INSENSITIVE_ORDER public static final Comparator<String> CASE_INSENSITIVE_ORDER A Comparator that orders String objects as by compareToIgnoreCase. This comparator is serializable. Note that this Comparator does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The Collator class provides locale-sensitive comparison. Since: 1.2 See Also: Collator Constructor Detail String public String() Initializes a newly created String object so that it represents an empty character sequence. Note that use of this constructor is unnecessary since Strings are immutable. String public String​(String original) Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string. Unless an explicit copy of original is needed, use of this constructor is unnecessary since Strings are immutable. Parameters: original - A String String public String​(char[] value) Allocates a new String so that it represents the sequence of characters currently contained in the character array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the newly created string. Parameters: value - The initial value of the string String public String​(char[] value, int offset, int count) Allocates a new String that contains characters from a subarray of the character array argument. The offset argument is the index of the first character of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the newly created string. Parameters: value - Array that is the source of characters offset - The initial offset count - The length Throws: IndexOutOfBoundsException - If offset is negative, count is negative, or offset is greater than value.length - count String public String​(int[] codePoints, int offset, int count) Allocates a new String that contains characters from a subarray of the Unicode code point array argument. The offset argument is the index of the first code point of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are converted to chars; subsequent modification of the int array does not affect the newly created string. Parameters: codePoints - Array that is the source of Unicode code points offset - The initial offset count - The length Throws: IllegalArgumentException - If any invalid Unicode code point is found in codePoints IndexOutOfBoundsException - If offset is negative, count is negative, or offset is greater than codePoints.length - count Since: 1.5 String @Deprecated(since=\"1.1\") public String​(byte[] ascii, int hibyte, int offset, int count) Deprecated. This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String constructors that take a Charset, charset name, or that use the platform's default charset. Allocates a new String constructed from a subarray of an array of 8-bit integer values. The offset argument is the index of the first byte of the subarray, and the count argument specifies the length of the subarray. Each byte in the subarray is converted to a char as specified in the String(byte[],int) constructor. Parameters: ascii - The bytes to be converted to characters hibyte - The top 8 bits of each 16-bit Unicode code unit offset - The initial offset count - The length Throws: IndexOutOfBoundsException - If offset is negative, count is negative, or offset is greater than ascii.length - count See Also: String(byte[], int), String(byte[], int, int, java.lang.String), String(byte[], int, int, java.nio.charset.Charset), String(byte[], int, int), String(byte[], java.lang.String), String(byte[], java.nio.charset.Charset), String(byte[]) String @Deprecated(since=\"1.1\") public String​(byte[] ascii, int hibyte) Deprecated. This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String constructors that take a Charset, charset name, or that use the platform's default charset. Allocates a new String containing characters constructed from an array of 8-bit integer values. Each character c in the resulting string is constructed from the corresponding component b in the byte array such that: c == (char)(((hibyte & 0xff) << 8) | (b & 0xff)) Parameters: ascii - The bytes to be converted to characters hibyte - The top 8 bits of each 16-bit Unicode code unit See Also: String(byte[], int, int, java.lang.String), String(byte[], int, int, java.nio.charset.Charset), String(byte[], int, int), String(byte[], java.lang.String), String(byte[], java.nio.charset.Charset), String(byte[]) String public String​(byte[] bytes, int offset, int length, String charsetName) throws UnsupportedEncodingException Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required. Parameters: bytes - The bytes to be decoded into characters offset - The index of the first byte to decode length - The number of bytes to decode charsetName - The name of a supported charset Throws: UnsupportedEncodingException - If the named charset is not supported IndexOutOfBoundsException - If offset is negative, length is negative, or offset is greater than bytes.length - length Since: 1.1 String public String​(byte[] bytes, int offset, int length, Charset charset) Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required. Parameters: bytes - The bytes to be decoded into characters offset - The index of the first byte to decode length - The number of bytes to decode charset - The charset to be used to decode the bytes Throws: IndexOutOfBoundsException - If offset is negative, length is negative, or offset is greater than bytes.length - length Since: 1.6 String public String​(byte[] bytes, String charsetName) throws UnsupportedEncodingException Constructs a new String by decoding the specified array of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array. The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required. Parameters: bytes - The bytes to be decoded into characters charsetName - The name of a supported charset Throws: UnsupportedEncodingException - If the named charset is not supported Since: 1.1 String public String​(byte[] bytes, Charset charset) Constructs a new String by decoding the specified array of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required. Parameters: bytes - The bytes to be decoded into characters charset - The charset to be used to decode the bytes Since: 1.6 String public String​(byte[] bytes, int offset, int length) Constructs a new String by decoding the specified subarray of bytes using the platform's default charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required. Parameters: bytes - The bytes to be decoded into characters offset - The index of the first byte to decode length - The number of bytes to decode Throws: IndexOutOfBoundsException - If offset is negative, length is negative, or offset is greater than bytes.length - length Since: 1.1 String public String​(byte[] bytes) Constructs a new String by decoding the specified array of bytes using the platform's default charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array. The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required. Parameters: bytes - The bytes to be decoded into characters Since: 1.1 String public String​(StringBuffer buffer) Allocates a new string that contains the sequence of characters currently contained in the string buffer argument. The contents of the string buffer are copied; subsequent modification of the string buffer does not affect the newly created string. Parameters: buffer - A StringBuffer String public String​(StringBuilder builder) Allocates a new string that contains the sequence of characters currently contained in the string builder argument. The contents of the string builder are copied; subsequent modification of the string builder does not affect the newly created string. This constructor is provided to ease migration to StringBuilder. Obtaining a string from a string builder via the toString method is likely to run faster and is generally preferred. Parameters: builder - A StringBuilder Since: 1.5 Method Detail length public int length() Returns the length of this string. The length is equal to the number of Unicode code units in the string. Specified by: length in interface CharSequence Returns: the length of the sequence of characters represented by this object. isEmpty public boolean isEmpty() Returns true if, and only if, length() is 0. Returns: true if length() is 0, otherwise false Since: 1.6 charAt public char charAt​(int index) Returns the char value at the specified index. An index ranges from 0 to length() - 1. The first char value of the sequence is at index 0, the next at index 1, and so on, as for array indexing. If the char value specified by the index is a surrogate, the surrogate value is returned. Specified by: charAt in interface CharSequence Parameters: index - the index of the char value. Returns: the char value at the specified index of this string. The first char value is at index 0. Throws: IndexOutOfBoundsException - if the index argument is negative or not less than the length of this string. codePointAt public int codePointAt​(int index) Returns the character (Unicode code point) at the specified index. The index refers to char values (Unicode code units) and ranges from 0 to length() - 1. If the char value specified at the given index is in the high-surrogate range, the following index is less than the length of this String, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned. Parameters: index - the index to the char values Returns: the code point value of the character at the index Throws: IndexOutOfBoundsException - if the index argument is negative or not less than the length of this string. Since: 1.5 codePointBefore public int codePointBefore​(int index) Returns the character (Unicode code point) before the specified index. The index refers to char values (Unicode code units) and ranges from 1 to length. If the char value at (index - 1) is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the char value at index - 1 is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned. Parameters: index - the index following the code point that should be returned Returns: the Unicode code point value before the given index. Throws: IndexOutOfBoundsException - if the index argument is less than 1 or greater than the length of this string. Since: 1.5 codePointCount public int codePointCount​(int beginIndex, int endIndex) Returns the number of Unicode code points in the specified text range of this String. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each. Parameters: beginIndex - the index to the first char of the text range. endIndex - the index after the last char of the text range. Returns: the number of Unicode code points in the specified text range Throws: IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String, or beginIndex is larger than endIndex. Since: 1.5 offsetByCodePoints public int offsetByCodePoints​(int index, int codePointOffset) Returns the index within this String that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each. Parameters: index - the index to be offset codePointOffset - the offset in code points Returns: the index within this String Throws: IndexOutOfBoundsException - if index is negative or larger then the length of this String, or if codePointOffset is positive and the substring starting with index has fewer than codePointOffset code points, or if codePointOffset is negative and the substring before index has fewer than the absolute value of codePointOffset code points. Since: 1.5 getChars public void getChars​(int srcBegin, int srcEnd, char[] dst, int dstBegin) Copies characters from this string into the destination character array. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1 (thus the total number of characters to be copied is srcEnd-srcBegin). The characters are copied into the subarray of dst starting at index dstBegin and ending at index: dstBegin + (srcEnd-srcBegin) - 1 Parameters: srcBegin - index of the first character in the string to copy. srcEnd - index after the last character in the string to copy. dst - the destination array. dstBegin - the start offset in the destination array. Throws: IndexOutOfBoundsException - If any of the following is true: srcBegin is negative. srcBegin is greater than srcEnd srcEnd is greater than the length of this string dstBegin is negative dstBegin+(srcEnd-srcBegin) is larger than dst.length";

        System.out.println("input lenght : " + dataTest.length());
        String res = gptApi.doEmbeddingREST(dataTest);
        System.out.println(res);

        float[] res2 = gptApi.doEmbedding(dataTest);
        System.out.println("Array response size : " + res2.length);
        System.out.println(Arrays.toString(res2));
    }
}